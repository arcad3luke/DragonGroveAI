import hashlib
import requests
import json
import os
import yara
from rich.console import Console
from modules.utilities import render_table, save_as_json
from modules.database import log_malware_detection  # Assuming a database logging function exists

console = Console()

# Config loading
with open("config/default_config.json") as f:
    config = json.load(f)

MALWARE_STORAGE_PATH = config["malware_storage_path"]
VIRUSTOTAL_API_KEY = config.get("virustotal_api_key", "")

### üîç Step 1: File Hashing
def calculate_file_hash(file_path, hash_algorithm="sha256"):
    """Compute file hash using the specified algorithm."""
    try:
        hash_func = getattr(hashlib, hash_algorithm)()
        with open(file_path, "rb") as f:
            while chunk := f.read(8192):
                hash_func.update(chunk)
        return hash_func.hexdigest()
    except Exception as e:
        console.print(f"[red]Error calculating hash for {file_path}: {e}[/red]")
        return None

### üõ°Ô∏è Step 2: VirusTotal Lookup
def query_virustotal(file_hash):
    """Check VirusTotal API for file reputation."""
    if not VIRUSTOTAL_API_KEY:
        console.print("[yellow]VirusTotal API key missing! Skipping lookup.[/yellow]")
        return {"Status": "Unknown"}

    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            stats = data.get("data", {}).get("attributes", {}).get("last_analysis_stats", {})
            return {
                "Status": "Malicious" if stats.get("malicious", 0) > 0 else "Clean",
                "Malicious Engines": stats.get("malicious", 0),
                "Suspicious Engines": stats.get("suspicious", 0),
                "Clean Engines": stats.get("harmless", 0),
            }
        else:
            console.print(f"[yellow]Error querying VirusTotal: {response.status_code} - {response.reason}[/yellow]")
            return {"Status": "Unknown"}
    except Exception as e:
        console.print(f"[red]Error querying VirusTotal: {e}[/red]")
        return {"Status": "Unknown"}

### üõ†Ô∏è Step 3: YARA Rule Matching (Static Detection)
def scan_with_yara(file_path, rule_file="rules/yara_rules.yar"):
    """Perform YARA pattern matching."""
    try:
        rules = yara.compile(filepath=rule_file)
        matches = rules.match(file_path)
        return matches if matches else "No Match"
    except Exception as e:
        console.print(f"[red]YARA error for {file_path}: {e}[/red]")
        return "Error"

### üß© Step 4: Entropy Analysis (Detect Packed Files)
def calculate_entropy(file_path):
    """Evaluate file entropy to detect obfuscation or packing."""
    try:
        with open(file_path, "rb") as f:
            data = f.read()
        entropy = sum(-p * (p and p.bit_length()) for p in (data.count(byte) / len(data) for byte in set(data)))
        return round(entropy, 2)
    except Exception as e:
        console.print(f"[red]Error calculating entropy for {file_path}: {e}[/red]")
        return None

### üî¨ Step 5: Run Comprehensive Malware Scan
def run_malware_detection():
    """Scan stored malware files for threats."""
    console.print("[bold cyan]Scanning stored malware samples...[/bold cyan]")
    
    if not os.path.exists(MALWARE_STORAGE_PATH):
        console.print("[red]Malware storage path does not exist! Aborting scan.[/red]")
        return
    
    scan_results = []

    for file in os.listdir(MALWARE_STORAGE_PATH):
        file_path = os.path.join(MALWARE_STORAGE_PATH, file)
        console.print(f"Analyzing: {file}")

        # Compute hash
        file_hash = calculate_file_hash(file_path)
        if not file_hash:
            console.print(f"[yellow]Skipping {file} due to hash calculation error.[/yellow]")
            continue

        # VirusTotal scan
        vt_status = query_virustotal(file_hash)

        # YARA rule matching
        yara_match = scan_with_yara(file_path)

        # Entropy calculation
        entropy_score = calculate_entropy(file_path)

        # Collect results
        scan_results.append({
            "File": file,
            "Hash": file_hash,
            "VirusTotal": vt_status,
            "YARA Match": yara_match,
            "Entropy Score": entropy_score
        })

        # Log detection in database
        log_malware_detection(file, file_hash, vt_status, yara_match, entropy_score)

    # Render results
    if scan_results:
        console.print("[bold green]Malware Scan Results:[/bold green]")
        render_table("Malware Analysis", scan_results)
    else:
        console.print("[yellow]No results to display.[/yellow]")

    # Save results for reference
    save_as_json(scan_results, "logs/malware_scan_results.json")
    console.print("[bold cyan]Malware scan complete! Results saved.[/bold cyan]")

# Run scan
if __name__ == "__main__":
    run_malware_detection()
